import os
import certifi
import ssl
import telegram.request

ssl_context = ssl.create_default_context(cafile=certifi.where())
telegram.request._httpxrequest.DEFAULT_SSL_CONTEXT = ssl_context

from dotenv import load_dotenv  # –ó–∞–≥—Ä—É–∂–∞–µ–º dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, filters, MessageHandler, CallbackContext
from telegram.request import HTTPXRequest  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º HTTPXRequest

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env

if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SSL (–µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
ssl_context = ssl.create_default_context(cafile=certifi.where())

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
request = HTTPXRequest()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–û—Å—Ç–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –û–î–ò–ù!)
app = Application.builder().token(TOKEN).request(request).build()

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ALLOWED_USERS = {7293170941, 875693247, 415437436, 5626401090}  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID



ALLOWED_USERS = {7293170941, 875693247,415437436,5626401909}  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ Telegram ID

TECH_CARDS = {
    "–ö–µ–±–∞–± –º": "üìå –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n-–õ–∞–≤–∞—à 80–≥\n- –°–∞–ª–∞—Ç 35–≥\n- –¢–æ–º–∞—Ç–∏ ‚Äì 30–≥\n- —Ü–∏–±—É–ª—è - 3–≥\n- –ú—è—Å–æ ‚Äì 90–≥\n- –°–æ—É—Å ‚Äì 70–≥",
    "üçï –ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": "üìå –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:\n- –¢—ñ—Å—Ç–æ ‚Äì 200–≥\n- –¢–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å ‚Äì 50–≥\n- –ú–æ—Ü–∞—Ä–µ–ª–∞ ‚Äì 100–≥\n- –ë–∞–∑–∏–ª—ñ–∫ ‚Äì 10–≥",
    "üçú –†–∞–º–µ–Ω": "üìå –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:\n- –õ–æ–∫—à–∏–Ω–∞ ‚Äì 150–≥\n- –ë—É–ª—å–π–æ–Ω ‚Äì 300–º–ª\n- –Ø–π—Ü–µ ‚Äì 1 —à—Ç\n- –°–≤–∏–Ω–∏–Ω–∞ ‚Äì 80–≥\n- –ó–µ–ª–µ–Ω–∞ —Ü–∏–±—É–ª—è ‚Äì 10–≥"
}

async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("üöÄ –ü–æ—á–∞—Ç–∏", callback_data="start_button")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help_button")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_button")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings_button")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.message.edit_text("–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "start_button":
        await query.message.edit_text("‚úÖ –í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ '–ü–æ—á–∞—Ç–∏'. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")

    elif query.data == "help_button":
        keyboard = [
            [InlineKeyboardButton("üìÑ –¢–µ—Ö. –∫–∞—Ä—Ç–∏", callback_data="tech_cards")],
            [InlineKeyboardButton("üí≥ –ö–∞—Å–æ–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è", callback_data="cash_solutions")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=reply_markup)

    elif query.data == "tech_cards":
        keyboard = [[InlineKeyboardButton(name, callback_data=f"recipe_{name}")] for name in TECH_CARDS.keys()]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="help_button")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É:", reply_markup=reply_markup)

    elif query.data.startswith("recipe_"):
        dish_name = query.data.replace("recipe_", "")
        if dish_name in TECH_CARDS:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tech_cards")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(TECH_CARDS[dish_name], reply_markup=reply_markup)
        else:
            await query.message.edit_text("‚ùå –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    elif query.data == "cash_solutions":
        await query.message.edit_text("üí≥ –¢—É—Ç –±—É–¥–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–∞—Å–æ–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è.")

    elif query.data == "stats_button":
        await query.message.edit_text("üìä –¢—É—Ç –±—É–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.")

    elif query.data == "settings_button":
        await query.message.edit_text("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞.")

    elif query.data == "back_to_main":
        await start(update, context)

async def echo(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(f"–í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    import ssl
import telegram.request

telegram.request._httpxrequest.DEFAULT_SSL_CONTEXT = ssl._create_unverified_context()
app.run_polling()

if __name__ == '__main__':
    main()
